.\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` <
.    ds C' >
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PKNOTSRG 1"
.TH PKNOTSRG 1 "09/19/06" "pknotsRG 1.3" "pknotsRG documentation"
.SH "NAME"
pknotsRG 1.3
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
pknotsRG: Folding canonical \s-1RNA\s0 secondary structures including pseudoknots
.SH "INTRODUCTION"
.IX Header "INTRODUCTION"
pknotsRG is a tool for thermodynamic folding of \s-1RNA\s0 secondary
structures, including the class of canonical simple recursive
pseudoknots. This class and the algorithms are described in detail in:
.PP
\&\*(L"Design, Implementation and Evaluation of a Practical Pseudoknot
Folding Algorithm based on Thermodynamics\*(R", Jens Reeder and Robert
Giegerich, \s-1BMC\s0 Bioinformatics, 5:104, 2004
.PP
Output:
.PP
The output consist of the input sequence, the secondary structure, and
the minimum free energy.  Basepairs of the first pseudoknot helix are
denoted by '{' and '}', the second helix by '[' and ']'. Basepairs not
involved in a pseudoknot correspond to normal brackets, '(' and ')'.
.PP
Example:
.PP
.Vb 2
\&    UCAAGUAUUCCGAAGCUCAACGGGAAAAUGAGCUA
\&    .......[[[[[.{{{{{{.]]]]]...}}}}}}. ( -14.9)
.Ve
.PP
Since pknotsRG-loc (option \-l) finds the best local pseudoknot, the
output of this variant also contains the start and end position of the
corresponding subsequence:
.PP
.Vb 3
\&    7........................34
\&    UUCCGAAGCUCAACGGGAAAAUGAGCU
\&    [[[[[.{{{{{{.]]]]]...}}}}}} (-14.51)
.Ve
.PP
When option \-s is used, pknotsRG computes a list of unordered
suboptimal results.
.PP
The energy model we use for pseudoknots:
.PP
Destabilizing:
.PP
.Vb 3
\&    creating a new pseudoknot :             9.0   (pkinit)
\&    basepair inside pseudoknot:             0.0
\&    not paired base in pk     :             0.3   (npp)
.Ve
.PP
The parameters pkinit and npp have major influence on the pseudoknot
energy. The values shown above seem to be the best choice for our test
sets. However, feel free to experiment with these values.
.PP
Stabilizing:
.PP
.Vb 3
\&    stacking of basepairs     :             stack
\&    base dangling of a pk pair:             dangle
\&    coaxial stacking          :             stack
.Ve
.PP
all values in (kcal/mole)
.PP
stack and dangle are the normal energies for nested structures like in
mfold\-3.1 or RNAfold. If nested or unnested structures occur inside a
pseudoknot, their energy, of course, contributes to the overall
pseudoknot energy.
.SH "OPTIONS"
.IX Header "OPTIONS"
\&\fB\-h\fR            	Display this information
.PP
Option \-h displays a command option overview.
.PP
\&\fB\-H\fR \f(CW\*(C`option\*(C'\fR  	Display detailed information on <option>
.PP
This displays the corresponding section of the pknotsRG manual for
the given command line option.
.PP
\&\fB\-v\fR            	Show version
.PP
This shows the version number of pknotsRG.
.PP
\&\fB\-m\fR                   Use mfe strategy
.PP
Compute the best structure (the structure with minimum free
energy). This is the default strategy.
.PP
\&\fB\-f\fR                   Use enf strategy
.PP
Compute the best structure that actually contains at least one
pseudoknot.
.PP
\&\fB\-l\fR                   Use loc strategy
.PP
Compute the best \*(L"compact\*(R" pseudoknot, defined as the structure with
the lowest energy to length ratio.
.PP
\&\fB\-s\fR                   Show suboptimals
.PP
Show suboptimals. If neither \fB\-e\fR nor \fB\-c\fR is specified, default is
use with \fB\-c\fR 10. This option can be combined with \fB\-m\fR, \fB\-f\fR and
\&\fB\-l\fR.
.PP
\&\fB\-u\fR                   No dangling bases (implies \-s)
.PP
This calculates all structures without dangling bases. Setting this
option reduces the number of suboptimals drastically.
.PP
\&\fB\-o\fR                   No suboptimals inside pknots (implies \-s \-l)
.PP
Used with loc\-strategy, this option discards all suboptimal structures
inside of pseudoknots.
.PP
\&\fB\-e\fR \f(CW\*(C`value\*(C'\fR   	Set energy range (kcal/mol)
.PP
This sets the energy range for suboptimal results. value is the
difference to the minimum free energy for the sequence.
.PP
\&\fB\-c\fR \f(CW\*(C`value\*(C'\fR   	Set energy range (%%)
.PP
This sets the energy range as percentage value of the minimum free
energy. For example, when \-c 10 is specified, and the minimum free
energy is \-10.0 kcal/mol, the energy range is set to \-9.0 to \-10.0
kcal/mol.
.PP
\&\fB\-n\fR \f(CW\*(C`value\*(C'\fR          Set npp-value [0.3]
.PP
This option sets the energy penalty for unpaired bases inside of
pseudoknots.
.PP
\&\fB\-p\fR \f(CW\*(C`value\*(C'\fR          Set pkinit-value [9]
.PP
This options sets the energy penalty for creating a new pseudoknot.
.PP
\&\fB\-k\fR \f(CW\*(C`value\*(C'\fR          Set maximal pknot-length 
.PP
This option sets the maximal pseudoknot-length allowed.
.PP
\&\fB\-w\fR \f(CW\*(C`value\*(C'\fR   	Set window size
.PP
Beginning with position 1 of the input sequence, the analysis is
repeatedly processed on subsequences of the specified size. After each
calculation, the results are printed out and the window is moved by
the window position increment (\-W), until the end of the input
sequence is reached.
.PP
\&\fB\-W\fR \f(CW\*(C`value\*(C'\fR   	Set window position increment
.PP
This option specifies the increment for the window analysis mode
(\-w).
.PP
\&\fB\-S\fR \f(CW\*(C`value\*(C'\fR   	Specify output width for structures
.PP
This splits the structure strings into parts of the specified
length. This option is useful when displaying results for long
sequences that would otherwise not fit onto the screen.
.PP
\&\fB\-F\fR \f(CW\*(C`filename\*(C'\fR	Read input from file
.PP
Let pknotsRG load its input data from file. file can contain a
plain single sequence, or multiple sequences in fasta format. When
given multiple sequences, each sequence is processed separately in the
order of input.
.PP
Valid characters in an input sequence are \*(L"\s-1ACGU\s0\*(R" and \*(L"acgu\*(R". \*(L"T\*(R" and
\&\*(L"t\*(R" will be converted to \*(L"U\*(R". Other letters are mapped to \*(L"N\*(R" and will
not be paired. All other characters are ignored.
.PP
\&\fB\-z\fR            	Colored output
.PP
This option enables colored output. In interactive mode, this is the
default setting, so use \-z to disable colors here.
.Sh "Additional interactive mode commands"
.IX Subsection "Additional interactive mode commands"
\&\fB:s\fR          Show current configuration
.PP
This command shows the current settings in an interactive pknotsRG
session.
.PP
\&\fB:d\fR           Reset configuration
.PP
This command sets all settings to their default values.
.PP
\&\fB:e\fR \f(CW\*(C`string\*(C'\fR Execute system command
.PP
Command \fB:e\fR executes a system command. 
.PP
\&\fB:q\fR           Quit
.PP
This command quits an interactive pknotsRG session.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Start pknotsRG in interactive mode:
.PP
.Vb 1
\&    pknotsRG
.Ve
.PP
Pipe file input.seq into the program:
.PP
.Vb 1
\&    cat input.seq | pknotsRG
.Ve
.SH "EXIT STATUS"
.IX Header "EXIT STATUS"
pknotsRG returns a zero exit status if it succeeds. Non zero is
returned in case of failure.
.SH "AUTHORS"
.IX Header "AUTHORS"
Copyright (C) 2004\-2006 Jens Reeder, Robert Giegerich, Peter Steffen
.PP
Faculty of Technology, Bielefeld University, 33594 Bielefeld, Germany
.PP
Send comments/bug reports to: J.Reeder <jreeder@techfak.uni\-bielefeld.de>.
Updates: http://bibiserv.techfak.uni\-bielefeld.de/pknotsrg/
.PP
\&\fBpknotsRG contains code from the following contributors:\fR
.PP
\&\fBEditline library (libedit)\fR
.PP
Copyright (C) 1997\-2003 The NetBSD Foundation, Inc.
All rights reserved.
